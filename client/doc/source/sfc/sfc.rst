App.vue
=======

Данный компонент отвечает за отрисовку статичных элементов сайта, которые присутствуют на всех страницах. В данный момент таким элементом является хедер, 
наполнение которого меняется в зависимости от того, залогинен пользователь на сайте или нет.
Для этого при запуске и после каждого перехода между страницами компонент проверяет факт логина с помощью опции отслеживания 
локального состояния ``watch()``, переключая реактивную (``ref``) переменную ``login`` в состояние 0 или 1 соответственно.
Элементы хедера которые нужно отображать или скрывать в зависимости от логина пользователя, принимают эту переменную в качестве аргумента директивы
условной отрисовки ``v-if``. Если она равна 0, они скрываются, иначе отображаются. Благодаря тому что переменная ``login`` реактивная,
изменения применяются мгновенно, без надобности в перезагрузке страницы.

Тег ``<router-view/>`` обозначает место для встраивания вложенных компонентов, что необходимо для роутинга.


AboutView.vue
=============

Заглушка для страницы описания сайта.


ExitView.vue
============

На странице производится удаление переменной ``id`` из локального хранилища пользователя. После данной операции переходит перенаправление на компонент
``FeedView`` с помощью роутинга ``router``. 

FeedView.vue
============

Данный компонент обеспечивает отображение постов, подгружаемых с помощью серверного метода ``api_get_pages()``. 
Посты подгружаются чанками, по 5 единиц. Содержимое превью постов сохраняется в реактивную переменную ``posts``, после чего идет отрисовка 
с использованием директивы ``v-for``, которая создает элементы страницы для каждого элемента массива ``posts``. 
Идентификатор последнего загруженного поста сохраняется в переменную ``load_line_id``. Местоположение этого поста отслеживается с помощью метода ``addEventListener("scroll")``.
Как только данный пост окажется во вьюпорте произойдет подгрузка следующего чанка постов.


LoginView.vue
=============

Компонент для обеспечения возможности войти в свой профиль на сайте. На странице реализована форма, в которую вводится идентификатор (не логин) пользователя
и его пароль, далее с помощью серверного метода ``api_check_user_password()``. Если проверка прошла успешно, то идентификатор пользователя 
сохраняется в локальное хранилище в качестве переменной ``id``, а пользователь с помощью роутинга перенаправляется на компонент ``FeedView``.
В противном случае пользователь получает сообщение о том что пароль неверный.


NewPostView.vue
===============

todo


PostView.vue
============

Компонент для отображение содержимого поста и комментариев к нему. Требуемый пост загружается с помощью серверного метода ``api_get_article()``.
Отображение как и в случае с лентой происходит с помощью директивы ``v-for``.


ProfileView.vue
===============

Заглушка страницы профиля.


RegisterView.vue
================

Компонент для обеспечения возможности регистрации на сайте. На странице реализована форма, в которую вводится логин нового пользователя
и пароль, далее с помощью серверного метода ``api_add_user()``. Если регистрация прошла успешно, то идентификатор нового пользователя 
сохраняется в локальное хранилище в качестве переменной ``id``, а пользователь с помощью роутинга перенаправляется на компонент ``FeedView``.
В противном случае пользователь получает сообщение о том что произошла ошибка (возможно такой пользователь уже зарегистрирован).


TagView.vue
===========

Заглушка страницы выборки постов по тегу.

